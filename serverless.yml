

service: ec2-start-stop-lambda # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
  region: ap-southeast-2

# you can add statements to the Lambda function's IAM Role here
# we add the roles needed to stop instances
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:StartInstances"
        - "ec2:StopInstances"
        - "ec2:DescribeTags"
      Resource: { "Fn::Join" : ["", ["arn:aws:ec2:*:*:instance/*" ] ]  }
    - Effect: "Allow"
      Action:
        - "ec2:DescribeRegions"
        - "ec2:DescribeInstances"
      Resource: { "Fn::Join" : ["", ["*" ] ]  }
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource: { "Fn::Join": ["", ["*" ] ]  }


  environment:
    AVAILABILITY_TAG_VALUES: 24x5_Mon-Fri,08-24_Mon-Fri,08-18_Mon-Sun,08-18_Mon-Fri,18_Shutdown,24x7_Mon-Sun,Maintenance
    #true if alerts are to be sent, false otherwise
    EMAIL_ALERTS_FLAG: true
    REGION: ${self:provider.region}
    EMAIL_FROM: ${self:custom.env.email.${self:custom.stage}.EMAIL_FROM}
    EMAIL_TO: ${self:custom.env.email.${self:custom.stage}.EMAIL_TO}
    EMAIL_SUBJECT: AWS Availability Scheduler Report - Development Environment
    EMAIL_CHARSET: UTF-8

# you can add packaging information here
package:
  include:
    - handler.py
    - serverless.yml
  exclude:
    - ./**


functions:
  ec2stop:
    handler: handler.ec2_stop_start
    timeout: 300
    events:
      - schedule: ${self:custom.env.cron.${self:custom.stage}}


plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
  stage: ${opt:stage, self:provider.stage}
  env:
    email:
      prod:
        EMAIL_FROM: dl-aws-ops-master@metricon.com.au
        EMAIL_TO: dl-aws-ops-master@metricon.com.au
      test:
        EMAIL_FROM: dl-aws-ops-master@metricon.com.au
        EMAIL_TO: dl-aws-ops-master@metricon.com.au
      dev:
        EMAIL_FROM: dl-aws-ops-master@metricon.com.au
        EMAIL_TO: dinuka@dinuka.tech
    cron:
      # runs every 40 minutes
      prod: rate(15 minutes)
      # runs every 1 minute(for dev purposes)
      dev: rate(1 minute)
      test: rate(15 minutes)
